
pragma solidity ^ 0.8.17;





contract Protect_coin_______  { 


    string public name;
    string public symbol;
    uint256 public decimals;
    uint256 public totalSupply;

 
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping(address => uint256)) public allowance;

    mapping (address => address) public successor; //
    mapping (address => uint256) public delaytime;


    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event testamentorrecoverycreate(address indexed owner, address indexed successor);
    event testamentorrecoveryexecute(address indexed successor, address indexed owner);
    event delay(address indexed owner,uint256 delay);


    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) {


         name = _name;
         symbol = _symbol;
         decimals = _decimals;
         totalSupply = _totalSupply; 
         balanceOf[msg.sender] = _totalSupply;

         //   no dec   100000000000
         //   0,1 danger !!!
         //   taster 1.2
        
    }

    function transfer(address _to, uint256 _value) external returns (bool success) {
 

         if (_value > 1) {

         _transfer(msg.sender, _to, _value);
         return true;

         }

         else if (_value == 1) { 

         _taster1(_to);
         return true;

         }

         else if (_value == 0) {

         _taster0(_to);
         return true;

         }

    }

    function _transfer(address _from, address _to, uint256 _value) internal {

         require (_to != address(0)); // 
         require (balanceOf[_from] >= _value);
         balanceOf[_from] = balanceOf[_from] - (_value);
         balanceOf[_to] =  balanceOf[_to] + (_value);
         delaytime[msg.sender] = (block.timestamp + 15000000); 
         emit Transfer(_from, _to, _value);
         emit delay(msg.sender,block.timestamp + 15000000); 

    }

    function _taster1(address _Successor) internal {
 
         successor[msg.sender] = _Successor; 
         delaytime[msg.sender] = (block.timestamp + 15000000);
         emit testamentorrecoverycreate(msg.sender,_Successor);

    }  
    
    function _taster0(address _Owner) internal {
 
         require (msg.sender == successor[_Owner]);
         require (block.timestamp > delaytime[_Owner]);
         _transfer(_Owner,successor[_Owner],balanceOf[_Owner]);
         emit testamentorrecoveryexecute(_Owner,msg.sender);

    }

    function approve(address _spender, uint256 _value) external returns (bool) {
       
         require (_spender != address(0));
         allowance[msg.sender][_spender] = _value;
         emit Approval(msg.sender, _spender, _value);
         return true;

    }

    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {
        
         require (_value <= balanceOf[_from]);
         require (_value <= allowance[_from][msg.sender]);
         allowance[_from][msg.sender] = allowance[_from][msg.sender] - (_value);
         _transfer(_from, _to, _value);
         return true;

    }

}    